// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract Halo2Dapp {

    uint256 constant bn254Prime = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // halo2 verification contract
    address private halo2Verifier;

    uint256 public projectId;
    uint256 public proverId;
    string public clientId;
    bytes public data;

    function setReceiver(address _receiver) public {
        halo2Verifier = _receiver;
    }

    function getReceiver() public view returns (address ){
        return halo2Verifier;
    }

    // verifier is the verify contract, it was generated by circuit.
    function process(uint256 _projectId, uint256 _proverId, string memory _clientId, bytes calldata _data) public {
        require(halo2Verifier != address(0), "verifier address not set");
        projectId = _projectId;
        proverId = _proverId;
        clientId = _clientId;
        data = _data;

        (uint256 publicInput, uint256 taskID, bytes memory _proof) = abi.decode(_data, (uint256, uint256, bytes));
        bytes32 _publicInput = uint256ToFr(publicInput);
        bytes32 _taskID = uint256ToFr(taskID);
        bytes32 _projectID = uint256ToFr(projectId);

        bytes memory callData = abi.encodePacked(_publicInput, _projectID, _taskID, _proof);

        (bool success,) = halo2Verifier.staticcall(callData);
        require(success, "Failed to verify proof");
        // TODO
    }

    function uint256ToFr(uint256 _value) public pure returns (bytes32) {
        return bytes32(_value % bn254Prime);
    }
}
