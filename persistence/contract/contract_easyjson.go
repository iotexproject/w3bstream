// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package contract

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract(in *jlexer.Lexer, out *block) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Provers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Provers = make(map[uint64]*Prover)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v1 *Prover
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Prover)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Provers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Projects":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Projects = make(map[uint64]*Project)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v2 *Project
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Project)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					(out.Projects)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract(out *jwriter.Writer, in block) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Provers\":"
		out.RawString(prefix[1:])
		if in.Provers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Provers {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v3Name))
				out.RawByte(':')
				if v3Value == nil {
					out.RawString("null")
				} else {
					(*v3Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Projects\":"
		out.RawString(prefix)
		if in.Projects == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Projects {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v4Name))
				out.RawByte(':')
				if v4Value == nil {
					out.RawString("null")
				} else {
					(*v4Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v block) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v block) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *block) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *block) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract(l, v)
}
func easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract1(in *jlexer.Lexer, out *Contract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract1(out *jwriter.Writer, in Contract) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComIotexprojectW3bstreamPersistenceContract1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComIotexprojectW3bstreamPersistenceContract1(l, v)
}
