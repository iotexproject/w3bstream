// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package contract

import (
	json "encoding/json"
	common "github.com/ethereum/go-ethereum/common"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract(in *jlexer.Lexer, out *projectDiff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract(out *jwriter.Writer, in projectDiff) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v projectDiff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v projectDiff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *projectDiff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *projectDiff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract(l, v)
}
func easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract1(in *jlexer.Lexer, out *blockProjectDiff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract1(out *jwriter.Writer, in blockProjectDiff) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v blockProjectDiff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v blockProjectDiff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *blockProjectDiff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *blockProjectDiff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract1(l, v)
}
func easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract2(in *jlexer.Lexer, out *blockProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Projects":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Projects = make(map[uint64]*Project)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v1 *Project
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Project)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Projects)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract2(out *jwriter.Writer, in blockProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Projects\":"
		out.RawString(prefix[1:])
		if in.Projects == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Projects {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v blockProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v blockProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *blockProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *blockProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract2(l, v)
}
func easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract3(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "Paused":
			out.Paused = bool(in.Bool())
		case "Uri":
			out.Uri = string(in.String())
		case "Hash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Hash).UnmarshalJSON(data))
			}
		case "Attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Attributes = make(map[common.Hash][]uint8)
				for !in.IsDelim('}') {
					var key common.Hash
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError(key.UnmarshalText(data))
					}
					in.WantColon()
					var v3 []uint8
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						v3 = in.Bytes()
					}
					(out.Attributes)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract3(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"Paused\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paused))
	}
	{
		const prefix string = ",\"Uri\":"
		out.RawString(prefix)
		out.String(string(in.Uri))
	}
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix)
		out.RawText((in.Hash).MarshalText())
	}
	{
		const prefix string = ",\"Attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Attributes {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.RawText((v5Name).MarshalText())
				out.RawByte(':')
				out.Base64Bytes(v5Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b166cadEncodeGithubComIotexprojectW3bstreamPersistenceContract3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b166cadDecodeGithubComIotexprojectW3bstreamPersistenceContract3(l, v)
}
