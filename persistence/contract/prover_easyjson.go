// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package contract

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract(in *jlexer.Lexer, out *vmTypeUpdated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract(out *jwriter.Writer, in vmTypeUpdated) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v vmTypeUpdated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v vmTypeUpdated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *vmTypeUpdated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *vmTypeUpdated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract(l, v)
}
func easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract1(in *jlexer.Lexer, out *proverDiff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract1(out *jwriter.Writer, in proverDiff) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v proverDiff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v proverDiff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *proverDiff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *proverDiff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract1(l, v)
}
func easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract2(in *jlexer.Lexer, out *blockProverDiff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract2(out *jwriter.Writer, in blockProverDiff) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v blockProverDiff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v blockProverDiff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *blockProverDiff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *blockProverDiff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract2(l, v)
}
func easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract3(in *jlexer.Lexer, out *blockProver) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Provers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Provers = make(map[uint64]*Prover)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v1 *Prover
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Prover)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Provers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract3(out *jwriter.Writer, in blockProver) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Provers\":"
		out.RawString(prefix[1:])
		if in.Provers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Provers {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v blockProver) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v blockProver) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *blockProver) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *blockProver) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract3(l, v)
}
func easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract4(in *jlexer.Lexer, out *Prover) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint64(in.Uint64())
		case "OperatorAddress":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OperatorAddress).UnmarshalJSON(data))
			}
		case "Paused":
			out.Paused = bool(in.Bool())
		case "VMTypes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.VMTypes = make(map[uint64]bool)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v3 bool
					v3 = bool(in.Bool())
					(out.VMTypes)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract4(out *jwriter.Writer, in Prover) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"OperatorAddress\":"
		out.RawString(prefix)
		out.RawText((in.OperatorAddress).MarshalText())
	}
	{
		const prefix string = ",\"Paused\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paused))
	}
	{
		const prefix string = ",\"VMTypes\":"
		out.RawString(prefix)
		if in.VMTypes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.VMTypes {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v4Name))
				out.RawByte(':')
				out.Bool(bool(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Prover) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Prover) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb181660EncodeGithubComIotexprojectW3bstreamPersistenceContract4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Prover) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Prover) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb181660DecodeGithubComIotexprojectW3bstreamPersistenceContract4(l, v)
}
