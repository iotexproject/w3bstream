// Code generated by MockGen. DO NOT EDIT.
// Source: ../../output/output.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -package=mock -destination=./mock_output.go -source=../../output/output.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -package=mock -destination=./mock_output.go -source=../../output/output.go

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockOutput) Output(projectID uint64, taskData [][]byte, proof []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", projectID, taskData, proof)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output.
func (mr *MockOutputMockRecorder) Output(projectID, taskData, proof any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockOutput)(nil).Output), projectID, taskData, proof)
}
