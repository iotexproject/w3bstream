// Code generated by MockGen. DO NOT EDIT.
// Source: ../../datasource/datasource.go
//
// Generated by this command:
//
//	mockgen -write_generate_directive -package=mock -destination=./mock_datasource.go -source=../../datasource/datasource.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	task "github.com/machinefi/sprout/task"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -package=mock -destination=./mock_datasource.go -source=../../datasource/datasource.go

// MockDatasource is a mock of Datasource interface.
type MockDatasource struct {
	ctrl     *gomock.Controller
	recorder *MockDatasourceMockRecorder
}

// MockDatasourceMockRecorder is the mock recorder for MockDatasource.
type MockDatasourceMockRecorder struct {
	mock *MockDatasource
}

// NewMockDatasource creates a new mock instance.
func NewMockDatasource(ctrl *gomock.Controller) *MockDatasource {
	mock := &MockDatasource{ctrl: ctrl}
	mock.recorder = &MockDatasourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatasource) EXPECT() *MockDatasourceMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockDatasource) Retrieve(nextTaskID uint64) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", nextTaskID)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockDatasourceMockRecorder) Retrieve(nextTaskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockDatasource)(nil).Retrieve), nextTaskID)
}
